#!/bin/bash
#
# Create the darwin bundle
#
set -e
umask 027
cd "$(dirname "$0")"

if [[ $debug ]]; then
    set -x
    export install_debug=1
fi

if [[ $keep ]]; then
    export install_keep=1
fi

. ./install-functions.sh

# git_pull below assumes definitions are relative
fedora_container=../../../radiasoft/fedora-container
home_env=../../../biviosoftware/home-env

if [[ $production ]]; then
    git_pull() {
        local dir=$1
        (
            if [[ -d $dir ]]; then
                cd "$dir"
                git pull
            else
                local p=$(dirname "$dir")
                mkdir -p "$p"
                cd "$p"
                # Definitions are relative (see above)
                git clone --depth 1 https://github.com/"${dir##*../}".git
            fi
        )
        assert_subshell
    }
    panic_repo=https://panic.radtrack.us
    repo_host=update.radtrack.us
    repo=https://$repo_host
    dest=/var/www/virtualhost/$repo_host
    dmg_src=/var/www/virtualhost/depot/foss
    git pull

    if [[ ! -d $fedora_container ]]; then
        need_container_build=1
    fi
    git_pull "$fedora_container"

    if [[ ! $need_container_build && ! $no_container_build ]]; then
        echo -n "Do you want to build fedora-container? [yn] "
        read x
        if [[ $x =~ ^[yY] ]]; then
            need_container_build=1
        fi
    fi

    if [[ $need_container_build ]]; then
        no_container_build=
        (
            cd $fedora_container
            container-conf/builder vagrant
        )
        assert_subshell
    fi

    git_pull "$home_env"
elif [[ ! $dest ]]; then
    dest=../bundle
    mkdir -p "$dest"/{errors,clients}
    export dest=$(cd "$dest"; pwd)
    export repo=file://$dest
    export panic_repo=$repo
    export dmg_src=$PWD/dmg

    shopt -s nullglob
    dmg_list=( "$dmg_src"/*.dmg )
    if (( ${#dmg_list[@]} < 3 )); then
        echo 'Not enough *.dmg in "dmg/*"' 1>&2
        exit 1
    fi
fi

if ! [[ $repo && $dest && $dmg_src ]]; then
    bundle_err "Usage: repo=<url> dest=<dir> dmg_src=<dir> $0"
fi
export install_repo=$repo
export install_panic_repo=$panic_repo

export install_bundle_display_name=RadTrack
export install_bundle_name=org.radtrack
export install_clients_url=$install_repo/clients
export install_os_machine=darwin/x86_64
export install_panic_url=$install_panic_repo/errors
export install_support=support@radtrack.org
# Every bundle is a new version. No way to know from commit date
export install_version=$(date -u +%Y%m%d.%H%M%S)

# Computed or consdtant
export install_curl='curl -f -L -s -S --retry 3'
export install_update_root=/opt/$install_bundle_name
export install_update_conf=$install_update_root/etc/update.conf
export install_version_url=$install_repo/$install_bundle_name/$install_os_machine/$install_version
export install_install_log_file=/var/log/$install_bundle_name.install.log
export install_update_log_file=${install_install_log_file/install./update.}

src=$PWD

if [[ $production ]]; then
    if [[ ! -d $dest ]]; then
        install_err "$dest: destination directory doesn't exist"
    fi
    _install() {
        install -m 0440 "$@" "$dest"
    }
    _install_rm() {
        _install "$@"
        rm -f "$@"
    }
else
    mkdir -p "$dest"
    _install() {
        for f in "$@"; do
            if [[ ! -r $f ]]; then
                install_err "$f: not found"
            fi
            ln -s "$PWD/$f" "$dest"
        done
    }
    _install_rm() {
        _install "$@"
    }
fi

dest_bundle_root=$dest/$install_bundle_name
dest=$dest_bundle_root/$install_os_machine/$install_version
mkdir -p "$dest"
dest=$(cd "$dest"; pwd)

cp -a "$fedora_container"/libexec/find-available-ip.pl .
cp -a "$home_env"/bin/bivio_vagrant_ssh bivio_vagrant_ssh.sh
tgz=install.tar.gz
tar cz -T - -f "$tgz" <<'EOF'
bivio_vagrant_ssh.sh
darwin-radtrack.sh
find-available-ip.pl
install-darwin-pkg.sh
install-functions.sh
install-init.sh
install-lock.sh
install-update-daemon.sh
install-user.sh
remove-existing-vm.pl
update-daemon.sh
EOF
rm bivio_vagrant_ssh.sh find-available-ip.pl

export install_channel=
export install_channel_url=
echo '{{ install_bootstrap_vars }}' | install_template - install-bootstrap-vars.sh

_install_rm "$tgz" install-bootstrap-vars.sh

for dmg in XQuartz VirtualBox Vagrant; do
    f=$dmg_src/$dmg.dmg
    _install "$f"
done

_install install-main.sh install.sh update.sh

(
    cd ..
    if [[ ! $no_container_build ]]; then
        debug="$debug" container-conf/builder vagrant
    fi
    _install vagrant-build/radiasoft-radtrack.box
)
assert_subshell

(
    cd "$dest"
    f="$src/MANIFEST"
    ls > "$f"
    _install_rm "$f"
)
assert_subshell

if [[ $production ]]; then
    chgrp -R -P -h apache "$dest_bundle_root"
fi

echo "Created: $dest"

# chgrp must be before, because promote-version uses group of install.sh
version_dir=$dest channel=develop bash $src/promote-version
