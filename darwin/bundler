#!/bin/bash
#
# Create the darwin bundle
#
set -e
assert_subshell() {
    # Subshells are strange with set -e so need to return $? after called to
    # test false at outershell.
    return $?
}

umask 027

# git_pull below assumes definitions are relative
fedora_container=../../../radiasoft/fedora-container
home_env=../../../biviosoftware/home-env

if [[ $debug ]]; then
    set -x
fi

bundle_err() {
    echo "$1" 1>&2
    exit 1
}

if [[ $production ]]; then
    git_pull() {
        local dir=$1
        (
            if [[ -d $dir ]]; then
                cd "$dir"
                git pull
            else
                local p=$(dirname "$dir")
                mkdir -p "$p"
                cd "$p"
                # Definitions are relative (see above)
                git clone https://github.com/"${dir##../}".git
            fi
        )
        assert_subshell
    }
    repo=https://update.radtrack.us
    dest=/var/www/virtualhost/update.radtrack.us
    dmg_src=/var/www/virtualhost/depot/foss
    git pull

    if [[ ! -d $fedora_container ]]; then
        need_container_build=1
    fi
    git_pull "$fedora_container"

    if [[ ! $need_container_build && ! $no_container_build ]]; then
        echo -n "Do you want to build fedora-container? [yn] "
        read x
        if [[ $x =~ ^[yY] ]]; then
            need_container_build=1
        fi
    fi

    if [[ $need_container_build ]]; then
        no_container_build=
        (
            cd $fedora_container
            container-conf/builder vagrant
        )
        assert_subshell
    fi

    git_pull "$home_env"
fi

if ! [[ $repo && $dest && $dmg_src ]]; then
    bundle_err "Usage: repo=<url> dest=<dir> dmg_src=<dir> $0"
fi
export bundle_repo=$repo

# First channel is always develop
export bundle_channel=develop

export bundle_name=org.radtrack
export bundle_display_name=RadTrack
export bundle_os_machine=darwin/x86_64
export bundle_support=support@radtrack.org
export bundle_version=$(date +%Y%m%d.%H%M%S)

src=$PWD

if [[ $dev_install ]]; then
    mkdir -p "$dest"
    _install() {
        for f in "$@"; do
            if [[ ! -r $f ]]; then
                bundle_err "$f: not found"
            fi
            ln -s "$PWD/$f" "$dest"
        done
    }
    _install_rm() {
        _install "$@"
    }
else
    if [[ ! -d $dest ]]; then
        bundle_err "$dest: destination directory doesn't exist"
    fi
    _install() {
        install -m 0440 "$@" "$dest"
    }
    _install_rm() {
        _install "$@"
        rm "$@"
    }
fi

dest_bundle_root=$dest/$bundle_name
dest=$dest_bundle_root/$bundle_os_machine/$bundle_version
mkdir -p "$dest"
dest=$(cd "$dest"; pwd)

cp -a "$fedora_container"/libexec/find-available-ip.pl .
cp -a "$home_env"/bin/bivio_vagrant_ssh bivio_vagrant_ssh.sh
tgz=install.tar.gz
tar cz -T - -f "$tgz" <<'EOF'
bivio_vagrant_ssh.sh
darwin-radtrack.sh
find-available-ip.pl
install-darwin-pkg.sh
install-functions.sh
install-lock.sh
install-update-daemon.sh
install-user.sh
remove-existing-vm.pl
update-daemon.sh
EOF
_install_rm "$tgz"
rm bivio_vagrant_ssh.sh

for dmg in XQuartz VirtualBox Vagrant; do
    f=$dmg_src/$dmg.dmg
    _install "$f"
done

_install install-main.sh

(
    cd ..
    if [[ ! $no_container_build ]]; then
        debug="$debug" container-conf/builder vagrant
    fi
    _install vagrant-build/radiasoft-radtrack.box
)
assert_subshell

for b in install.sh update.sh; do
    n=$dest/$b
    perl -w -p - "$b" <<'EOF' > "$n"
        use strict;
        s{BUNDLE_DISPLAY_NAME}{$ENV{bundle_display_name}}g;
        s{BUNDLE_NAME}{$ENV{bundle_name}}g;
        s{OS_MACHINE}{$ENV{bundle_os_machine}}g;
        s{REPO}{$ENV{bundle_repo}}g;
        s{SUPPORT}{$ENV{bundle_support}}g;
        s{VERSION}{$ENV{bundle_version}}g;
EOF
    chmod 440 "$n"
done

(
    cd "$dest"
    f="$src/MANIFEST"
    ls > "$f"
    _install_rm "$f"
)
assert_subshell

if [[ ! $dev_install ]]; then
    chgrp -R -P -h apache "$dest_bundle_root"
fi

# chgrp must be before, because promote-version uses group of install.sh
version_dir=$dest channel=$bundle_channel bash $src/promote-version

echo "Created: $dest"
